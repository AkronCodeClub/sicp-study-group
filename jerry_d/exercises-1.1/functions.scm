(define (assert expected actual message)
  (if (equal? expected actual)
      (display "...   ")
      (display "FAIL: "))
  (display message)
  (newline))

(define (abs x)
  (if (< x 0)
      (- x)
      x))

(define (sum_squares_of_two_biggest a b c)
  (cond ((and (< a b) (< a c)) (+ (* b b) (* c c)))
        ((and (< b a) (< b c)) (+ (* a a) (* c c)))
        (else                  (+ (* a a) (* b b)))))

(assert 2  (sum_squares_of_two_biggest 1 1 1) "returns 2 when given all arguments are 1")
(assert 8  (sum_squares_of_two_biggest 2 2 2) "returns 8 when given all arguments are 2")
(assert 18 (sum_squares_of_two_biggest 3 3 2) "returns 18 when given when given 3, 3, and a smaller number")
(assert 13 (sum_squares_of_two_biggest 1 2 3) "returns 13 when given 1, 2, and 3")
(assert 52 (sum_squares_of_two_biggest 2 4 6) "returns the proper result when the first arg is the smallest")
(assert 52 (sum_squares_of_two_biggest 4 2 6) "returns the proper result when the second arg is the smallest")
(assert 52 (sum_squares_of_two_biggest 6 4 2) "returns the proper result when the first arg is the smallest")
